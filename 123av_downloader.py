#coding:utf8
#title_en: 123av
#comment:https://123av.com/
from utils import Downloader,try_n,LazyUrl,get_print,Soup,clean_title
from error_printer import print_error
from m3u8_tools import M3u8_stream
from downloader import read_html as get,download
from io import BytesIO

class Video:
    def __init__(self,url,cwz):
        self.cw=cwz
        urlv=self.getx(url)
        get_print(cwz)(urlv)
        m=lambda: M3u8_stream(urlv,referer='https://javplayer.me/',deco=self.cbyte,n_thread=4)
        try:
            m=m()
        except Exception as e:
            raise e
        if getattr(m,'live',None) is not None:
            m=m.live
        self.th=BytesIO()
        download(self.uth,buffer=self.th)
        self.url=LazyUrl(url,lambda _: m,self)
    def cbyte(self,dato):
        return dato[8:]
    @try_n(2)
    def getx(self,url):
        print_=get_print(self.cw)
        try:
            soup=Soup(get(url))
        except Exception as e:
            print_(print_error(e))

        self.uth=soup.find(id='player')['data-poster']
        self.filename=clean_title(soup.find('h1').text.strip()+'.mp4')
        if len(self.filename)>209:
            self.filename=self.filename[:205]+'.mp4'
        idv=soup.find(id='page-video')['v-scope']
        un=idv.find('id: ')+4
        idv='https://123av.com/en/ajax/v/'+idv[un:idv.find(',')]+'/videos'

        try:
            idv=get(idv)
        except Exception as e:
            print_(print_error(e))

        un=idv.find('url')+6
        idv=idv[un:idv.find('"',un)].replace('\\','')
        try:
            soup=Soup(get(idv))
        except Exception as e:
            print_(print_error(e))

        idv=soup.find(id='player')['v-scope']
        soup=Soup(f'<p>{idv}</p>')
        idv=soup.string
        un=idv.find('https')
        return idv[un:idv.find('"',un)].replace('\\','')

class Downloader_123av(Downloader):
    type = '123av'
    single=True
    strip_header=False
    URLS=['123av.com']
    display_name='123AV'
    MAX_PARALLEL=2
    icon='base64:iVBORw0KGgoAAAANSUhEUgAAAdIAAACHCAYAAACiVNjGAAAACXBIWXMAAC4jAAAuIwF4pT92AAAlVklEQVR4nO2dd7gdVdX/PwlJJFSDxqEXKdIEEZDOpgRFQAGVKgiRTiBcHF99BRTlZ3+dEHoTiPQiCAioNBmKFOlIFSlSZEIngRACub8/1gleLrfM2jP7nH3OXZ/nuY883r33rDs5Z9bstdf6rmHd3d0YhmEYhuHH8FYbYBiGYRjtjDlSwzAMw6iAOVLDMAzDqIA5UsMwDMOogDlSwzAMw6iAOVLDMAzDqIA5UsMwDMOogDlSwzAMw6iAOVLDMAzDqIA5UsMwDMOogDlSwzAMw6iAOVLDMAzDqIA5UsMwDMOowIhWGzAQhcvmBjYEVgfmB6YBfwNuT/LU2tYMQOGyeYGlgCWBscCYxs+wHsNmADOBl4HngReAp5M8ndlca9uPwmVjkHu7GHJ/FwIW7DXsbeBdYCrwH+T+PpPk6TtNNHUo8XlgA+ATwCzgEeB64I1WGuXJQsCWwLLIhucx4GrgzVYa1SEsC3wZ+CRyP28Dbge8fcqwGNuoFS77OHA4sA8ffTgB3AHsnuTpP5tpV6wULlsY2AhYE3mYrAQs7rnc+8iX9j7kPl+T5OmjNZjZthQuWxp5QPe8v5/yXG42cn/vB+4CrgMesBfDSmwKTAI+18fvZgAnAD9q/HfsfAz4MdAFzN3rd68DE4DzmmpR5zAPcDywJx/eUADcC4xHvpdqonOkhct2BY5B3hYGYiqwVpKnz4a3Ki4Kl40CHLA18tb6mcCXfAa4DDgjydMHAl+r5RQuGw2MA74CfBHZ2YdkKnAFcBZwizlVFfsDJ/LRB2Nv7ge2AF4KbpE/8wBXIi8GA7ETcFF4czqKEcCfgc0HGDMDeab+Vbt4NI60cNkiwEnAtoppFyZ5unMgk6KicNkw5Av2TWB7JEzbCu4GfgNclOTp7BbZUDuFy4YDX0Lu73bAvC0y5UngOOCUJE/bYQfVStYBbgXmKjn+BuQFKY6H3kc5Fji4xLhXkfDk60Gt6SwOASaXGDcV2Zi8rlk8CkdauGxP5I/sK4w7ELOBBZM8nV63TbFQuGwhYF9gb+TLEwuPAEckeXppqw2pQuGyscCByP31DYeH4EXkheWYJE/fa7UxkfJXYBPlnJ2BC+s3pTLzIrkKvcO5/XEY8Itw5nQUI4GnkHyGMkxEXmZL01JHWrhsSeA0JHzmi0vy9KaaTIqGxr35PhLPn6e11gzIFcCEJE+fa7UhGhr39zBgD8o/vFrBP4D9kzy9tdWGRMZawN895t2LnHPHhvbveR5YBkmqMgZmF3TnymcC39ZcoCVZu40w5X7Ar5Fs3Cr4Jn1ESeGyTwFHIolWI1tsThm+CmxSuOxbSZ5e3mpjBqNwWYIkc+xFe9zfVYFbCpf9FPhxkqfvt9qgSEg9562BHJGoz8EiYzFgR+DcVhvSBnSFvkDTd6SFyz4NnI4+JNMf45M8nVLTWi2jcNkI4FDgCGCBFpvjy0+BH8WYLNO4vymSDV715a1VXAfskuTpy602pMUsgYTqyp6N9uYqYJv6zKmF+ZCzT83L3V3A2mHM6RjWQ0omNRyCnFeXpmmCDIXLhhcu60JCVZs067rtQOGytZAknl/Tvk4U5CXgrMJlvg+4IDTu7z3AL2lfJwqSKHNz4bKYznJbwSH4O1GArYAVa7KlLqYjWaUa1kLq7I3+OVQ5fiZwvvYiTXGkhctWBG4GjgZGN+Oa7UDhsrkKlx2BFASv1mp7amI3xJkOVo4QnMb9PRy5v59ttT01sSJwYyPLfSgyP3LsUYVh6B+wzWCyx5yumm3oJJYEvqaccw4eJVJBz0h7hNN+ghQaGw0Kl30SefMZF/Ay05FyiieAV4C3+LDKy4LAIkiobFXq2w3vCjyHJEu1hEa28/lUS2QbjOnAPxs/ryH3d1qP3y8EJMgXehXq2w0vC1xVuGyjJE/fqmnNdmEf6vmcfgsJ88cUJr8BSYZaQzFneyTp6KkgFrU3B6OPXEzyuVAwR1q4bFVgCqIGY/SgcNnKiNxXnYX+3UjReY7s/m9L8vQFhU3DgOUQx7Mt4uCr7Cq/V7js70me/r7CGl40IiB/Apaucdlu5CF3M3AjcEeSp/9R2DTn/m6BnM99iWoRoTWAU5G616HCCKQ0oQ7mRsqejqppvbqYBJytGD8ccRjfCWNO2zIfUtKm4WrgYZ+L1Z5sVLhsJPKmdxjNyYpsq2SjwmUOuBx9zWx/3InUxV2gcZyD0SgP+Q6SXe1bHvIasFKSp0Vddg1G4bJ1ECdal2DFncAFiPhHnfd3EeSs7yCqiT98I8nTS+qxKnp2pN4a0KlItCAmbelRyO5yUcWcaUgW77TBBg4hJiBygBq2QBL61NTqSBtJHafT3PO+tnGkhcvWRcI3Vc+JZyJvrZOSPH2ksmEDULhsKaTWdwvPJZqmPlW4bHnkPPQTFZdq5v1NEEnMnXyXAFZO8vTV+qyKljuAL9S85j7Ab2tesyrfRxLjNByK3xlrJzIceBRYXjHnfvrWai5FLY600aXlh8gHoNkZm23hSBsSdA9RLVtwBvJlOabJu7xhSIThp55LbJrk6Y21GdQPhctuYHCd0oGYgTi1yc28vwCFy/ZCNGNHeUz/VZKn/1uzSbGxAXBLgHUfQhLRYirZGgM8iy5S8TRydt4xsp0V2Ab4o3LO7kiikReVs3Ybu6z7kAdtVGUPkbEB/k60G/gdsHySp4c1+yGf5Gl3kqc/Q0QMfPhBnfb0ReGyOYX2PnQjgvHLJ3n6g2bfX4AkT09HWjv56Ose1Ehe62R8BRgGYxXkvDomXkPySzQsjWhEG/pM5uep2ATA25EWLpuncNlkRDS6ru4jf0E6jXQi63vOuxtYM8nTPZM8fb5Og7QkeXoGcv6t5YuFy0IXjg/U1WEg7ka6CO0Rwf29AZEs1DIvosfcqXwanZM4D9mhlSWUk67CJPS75K4AdrQbn0X/LDgO6RvsjZcjLVy2LLILPcR3jV68ioRot6RzOxpopQzfRQQO1k3y9N4A9vjyC+Aaj3nj6zakF9q6yp73954A9niR5OnFKFVVGuxWty0R8R10GeS/QUL0ZRlHfHXGTyKtCzVshIg0DGW6lOPfAk6pelG1E2yc9V2C7iB3IC4FVmmHc86KaJJB7kd2oT+LrfNHQ/7vQPRvcDs0MrpDobm/DxLp/W1wBKDNEF6pcNnnAtjSasYgjRvKchNSpnQ68KZiXqy7Ui1ddRvRRoxFXw52OjVs3nx2k5sBq1e9MJJtuGOSp19P8vTFGtaLnTtLjjsTWC/J03+ENKYKSZ7+C/kAavgkYeXM7ig57ixgncjv7zTg5x5TfTOrY2Z/dEk3Rzf+dxq6z+iuwMKK8c3gFvQdbnakfLuwTuMAdMI/s6kp09nHkdZR2nI2sgu9uIa12oXrgccH+P07wF5Jnn67TRo6+4QfN6rdiv9yA5Ly3h8zgf0aZ6HtcH+noNtRQefpro5C6mzL8hTS1m8OxwJlu+WMpFxT7WaTKcePRCJGQ41R6P/uS6lJEcrHkVaR53oW2DrJ028lefpKhXXajiRPZyMp1n09xB9AdklnNNcqf5I8fRQ5J9cQzJE27u8O9B2meQA5Cz011PXrpiH9d8WgAz/MOiFsaSE7oRMmOIYPl388DfxBMX9/4uv9ewnwb+WcGP+O0OyMyHFq0L6k9IuPI/UtDTgZWDXJ06s957c9SZ7eiTzsLkTOcS5HnOuaSZ4+0ErbPLlSOb6OI4F+aYRrV0O66FyG1GV+FVgjydP7Ql47ENr7mxQumy+IJa1Bc275JtDXi+hkxRoLoTuPbQbvoY/+LIQ8V4YS2iYEfwNur+viPlq71yvHPwHs04yC/HYgydMHkbenTkD7QRxbuGy+JE+nB7EGSPL0WVooll8zZc99e7I00qqw3dkc3YvX6fQtkXcrkp9QVhGpC3npj0nY4DTgSHRND7oQLeaYhCZC4dCrEnmJ0/eHekea5OnjSGx5MGYjW+fVzYl2LPd7zFm2dis6lCRPn0Y6zGiILWHGF40I+2ykFrA/NA/N5YGvKMY3gzfRyxiuCGwZwJYY0e5Gn0QX8h8U3xrQiQwc4n0IWD/J0+8mefq25zWM+HkBCT1pqEtMfqigFSjphNDuikjz7bJcxsBJI5cgbf3KEmMpzDGUT5yaQ4w9V+vm08jxjYajqTni4OVIGwow45A+jD15B2lLtGaSpz5hKaONaCT4aEuX6up6M1TQ9stsRsel0Ggd2dGD/F57zhijsMEzyAuBhi2QPsOdzER0Yh0+8ouD4q1K1Ejs+CzwDUSwfh9gqSRPj0zyNKa2REZYZinH+7ZkG6poQ7vBegw3ibHoVJruppyY/WmIik1ZYtyV+pzrHVK7FfGwAPBt5ZyT0X+nBqXSl67hMIdKL0Sjb7Q1mXVIShr9o3EWMTIB3cvWYLvRObyOiJ2UrUvdAfgeUrIXC3cg2aYa3e7dkIYiLwWxqLXshS4Baxb6HqWlsIeaURVtU+p2EEOICe2ZZzv3JZ0bXVH9C4BG1OUYymexzkWcuzlt7ePcSF1ppzEcCetqOB+99GYpzJEaVfm4crwln+nQnin/J4gVzWF3JLRblhPRaT4/gU7kYh90O55mcBl6NZ4J+PW5jZntkFIvDbUJMPTGHKnhTeGy0egf9FND2NLBLKMYO5u4QpEahqHLMn0HOe/SMlkxdgFgb49rhGQ25cPZc0jonNr1OXQpx1+HKJwFwRypUQWfPrRNb5rdrjSadWteVB5P8rRSX8UW8mVgJcX4swAfmdEbEVWxshxCfAlcZ6LvWKKpy42dz6OXGw22GwVzpEY1tKn105M8befQY7NZVzk+pr61WrQPek2/0d5osl+XAravcK0QTEdUizSsDmxSvyktQVsf+xDwlxCGzMEcqVGF9ZTjnwhiRefilONvDGFEE1gNkQQsyzXAwxWudxG6s+TvVrhWKI5DX3rWCQINiyDNDDRMIrBUojlSowqbKce3846pqRQuGwZ8XTnt2hC2NAGto9KeEfbmXeAExfgvABtUvGbdPIe8EGj4CrBcAFuayQR0oiMFcG4gWz7AHKnhReGyZRApNw13hbClQ9kQXaLRPUme1tJbscksii4R5hHqCdOdjK4UK8YzRq1AwzDiLOkpy2hgP+Wc45FexEExR2r4og2vANxUuxWdy+HK8ecHsSI8B6PbYWhqQQfiFeBsxfjtEV3XmLgHyJVzxqMvWYuFbwKfVIyfAZwUyJYPYY7U8EXb7/DFhqykMQiFyzYEvqSYMoO+e3HGzrzodhivItm6daEJEWvLc5rFb5Tj5yW+kp4y+Oymz8Qvs1uNOVJDTeGyjYGVldOGbEN3DYXL5kbfMuuMJE/bUdFoPLpuQKdQrzLWo+g+l1p7m8HVwOPKOQcTX0nPYIxDVyXQTbXMbhXmSA0ffLIYNVJuQ5lT0NXnvgP8LJAtIRmOrqh+FroEobJMVozV7qCbwWx0fwPAksDX6jclKF3K8Vegf8HwxhypoaJw2eroGx9PBa4PYE5HUbjsx8C3lNN+3qa1uduia/J+MfB8ADuuAzRHDgcTn9zeFPQhzBjD1P3xGUSwQ4M25F0Jc6SGFp/dz++SPNXWvA0ZCpcNL1yWAUcqpz4K/DqASc2g7p6jvnQr114U2DGQLb7MQC+XuC6wTgBbQnAIup6jd1GutV5tmCM1SlO4bDNga+W0biRcafRB4bKFgT+jL6+YCezSpr1/10ZXl3krYUunzkXXZixGgYbj0Qs0xFjS05sxwB7KOU3djYI5UqMkhctGAMd6TL00ydN/1W1Pu1O4bEThsgMQ+bItPJaYmOTpffVa1TSaLcAwGDORTjJlWR29GEloXgTOUc75OrBEAFvqZF9gHsX4Z2hBj2xzpEZZvg+s4jHvV3Ub0s4ULhtduGw/xIGeCCzkscxvkjzVaq3GwlLoFJueQVqHheZEdIX72tB0M9C+cMyFnPnGygjKN2Kfw7HAewFsGZB2S4E2WkDhss8BP/KYenmSp3+v2Zy2o3DZQsDGiAP5KtKey5eTge/VYVeLmIg8wMtyLPB+IFt6MhU4DylxKcNWiLLXo8Es0vMgkjw1TjFnH+AoRAg/Nr4OLK4Y/yZwWiBbBsQcqTEghctGIlmB2kzF94EjajcoMgqXzYPcm7kRBzkWSUhZFqm1XR34LLpkif74BXB4kqdBBbgDsgDy4C7LdOD0QLb0xdGUd6QgZ4z7BrLFlwydI/04sCdyxhobXcrxpwLTAtgxKOZIjcH4EeIMtJzc7kpGhcvGAIchb8Ya3du6eQvYL8nT4OLbgdkXmF8x/gzgjUC29IV2R7c7IuWoSVQKzV+QYwPNMcxEJLQ9O4hFfqyLro3g+/jlcNSCnZEa/VK4bAvEkWh5Bb9QcDQ0smnvQBJjWulEbwM+1wFOdAS687huWvNg1Jwzzg0cEMoQT7rRCzQsjz4bPzRdyvEXAs8GsKMU5kiNPilctjhyZuTzGTm0TSXrenIq8oBpFS8CewEbJHnaCX1cv4Eo6pTlCqAV2d5/Ah5TjD8IcagxcQ5y5qshJoGGJZDPiwZtJ5xaMUdqfITGuehF6DotzOGaJE81XTWio3DZEujVm+riKeRt/NNJnp7RxuehvdFmuU4OYUQJtAINY4HdAtniyzvo5RQ3xe8IJwQHoUtIy4G7A9lSCnOkRl9MAtbzmPcGsotqd3zKfOrg30go/fQkT+sUZ281GwJrKcbfB9wYxJJynIV0minLodSTTFYnJyEOVUMMu9J50SWkQQsEGHpjjtT4EIXLJqCv3ZrDgUmePlenPS2iVXKGSyJ9RV8uXHZ2o8tOJxCbAMNgaCX3Vga2DGSLLy+hF2jYBUgC2KJhD3Qddh4jgs5S5kiNDyhctiX+CR7nJnl6Xp32tJB7aE7tYn98DAkX5oXLbi9ctl0LbanKckjtbFkK4IJAtmg4Ad0LVYxye5ly/ChgQghDSuLTc/RoIsg2NkdqAFC4bFXkXNTnM/EYsH+9FrWOJE9fQ98TNBTrAH8oXHZTQxij3dCGPU8E3g1ki4YXkEzQsowDVgtkiy/afqsg3+NWJU9tBaygGP8y9TZ698YcqUHhssWAq9DV+M3hbWCHJE9jVEapQgr8rdVG9GAj4K7CZT9p6B63Awshxf5lmYmc7cWCNsTcCbKBY4FvhjCkBF3K8SdSb6N3b8yRDnEKly2IpPxrShN6sk+Spw/WaFIUJHn6FrA5Isd3N80VBuiPuZD63L8WLvtUq40pwQHoBMfPIS5xg3uQjNCy7IKoWsXEdcD9yjldND95alV0ikwzCdPo3Yt2ebM1AlC4bDTwR0TCzodJHXQu+hGSPH0H+L/GT2kKly2ASK8lwMJIPepngM8Da6BL7e+LDYE7C5eNi7jG1Oe87ZgQhlTkaMCVHDsS+ZsPD2eOF5OA3ynGz3Fq14Yxp0+0Z6Nno6+VDcaw7u64ytQKl92Hrp5pfJKnU8JY07kULpsL+D2wnecSfwK+kuRpK5Ny2o6GNu+GwPaNnypZks8Dm0TqTPdANJrLch1+7eRCMxx4HNFOLsNriKDAW8Es0jMKeBpYRDHnapqndjQWKf3SnM2uDDwSxhw9FtodupyMvxN9CNjZnKieJE/fTvL0miRPD0AeuLvg37R6MeDawmU+whmhaRcBhsGYjc62MejOhZvBu8BxyjlbIVGUZrAfOid6NRE5UTBHOiQpXHYUsLfn9BeBbZI8fbNGk4YkSZ7OSvL0AuALiEN93mOZpYFLGhGGWBiH7rjgcSTCEStT0J2RdxHfs/UUJDFQQ1cAO3ozCjhQOaelcoB9Eds/thGYwmUHAT/0nD4N2CrJ06frs8hI8rS74VBXAy71WGJjpPF6LGh3o8cQQS3gAExH1+dSWzvbDF5FF2oHCc/7NJ7XsBO6kPN9wPVhTPHHHOkQonDZDvgndMwCvpHk6b01mmT0oCH0/w383rh/XLhMU4MXCq3Kz2voEmFahbbBeIylMJMRLeGyjEbCriHpUo7Xikw0BXOkQ4TCZZsD5+L/b75nkqfX1GiS0QeN3WmK/sxwJBFojqJX+DmNuBJz+uNZJDmvLBsCaweyxZd/Il11NExAPlsh2BjJZC/L8+hEMpqGOdIhQOGyNZCQoe8X4pBOLnOJlO8iTZo1fKVwmUYcvm4+ha4TyvvA8YFsCYFW3CBG2UBttGMxYMcQhqDfjR5L63SwB8QcaYdTuGw54M/AAp5LHJXkacs6zw9VGhnReyPn0hq0AvF1chCiE1yW39PCZswe3IFO7WoHYKlAtvhyE/os8a4AdiwDbKsY/xbSIzhKzJF2MIXLEsSJ+qrgnJTk6ZE1mmQoaHTS+bly2vaFyzTdM+piNKJkpKHVXV580Ng8F3BwKEMqoN2VroWEqutkIjr/81vg9ZptqA1zpB1KD+m/soXkvbmIOB8CQ43j0T1ARiEJS81md3SN4G9HdnjtxmXAM4rx++AfDQrFxYC23WFXjdefH13f4veJU/XqA0wisAMpXDYKORNdw3OJa4HdTXCh9SR5Or1w2QXouutsha5coyrD0J8Hfp6IdxiDoNEPXgAJ0cdU+/ge4pg00pfbI+HYp2q4/rfRNcj4Q03XDYY50g6jUZh/LrCZ5xJ3AtsleRpDKytDOB+dI92kcNlcTXwR8lHBGdX4GQpMRBJl3mu1IT04DTgSmK/k+OFIhKpqAtVw9Lq6MWSjD4iFdjuPyfiH9h4Gtk7yVKuAYoTlNnTtoj6OiAI0ixhrJmNiKeDrrTaiF28Apyvn7I1fq8WefBXZ2Zblb7TBEYA50g6icNmPkMxJH54FvpTk6cs1mmTUQJKns9BnWjaryfTngE2bdK12JsaXjWPQiUxozzb7oks5PkoBht6YI+0QCpftDfzEc/rLwBaNLFEjTh5Wjm/WjrSV5TbtxNrUn/lalaeQ80cNh+DvN9agfEs6gH8hyV3RY460Ayhctj0iSu3DNODLSZ4+VqNJRv08rRy/eAgjehGyWL8T6QSBhqXx7xrVpRw/mbg1mD/AHGmbU7hsY+A8/P4tZyGJRb5tvIzm8aJyfJU+p2WZSDj5uE5kO5p7dl2G2xo/Gro8rrMw0uGoLK8BZ3pcpyWYI21jCpetBvwRXS+/OcwGdkny9IZ6rTICMVM5PnRG/nzAvoGv0WkMozmtybRod6UbISINGg5E99J1Eu2hwQyYI21bCpctjQgu+BZ775/k6SX1WWQERpO1C+FFAMYj2cGGjj0J35pMyx/QHx10KcbOja58axZwgsqaFmOOtA0pXDYWuAZY1HOJw5M8bWbBvlGdBZXjtRq9GoYDhwZcv5OZl/CtybS8j77b0I7IGXkZdgXGKtY+D3hBaU9LMUGGNqNw2bzA1cDynkscneSpVr/VaD0aMXjQ72A1zFG5KctTwJroemG2E6OBRykfBTgIKeuISfTkdCTrv+wL20gkXHt4ibHal662KHnpiTnSNqKH9J9vq6yziLOezRicJZXjQzpSbfbpsUjySKfyOuKIyjqMRYGdke9jLExH1I405Uz7Az8DBhJw2RxYVbHmdcCDivFRYKHdNqFw2TBgCvBFzyWuBPZK8rRTdwWdjrYdV6jQ2DrA+orx04AzAtkSE8eh23HHWApzLDqBhoWQZgUDod2NRi8H2BfmSNuHSejSx3tyC7BTkqcxaX0aOrQNCJ4MYoVegOEM4M0QhkTGU0gGfVlWB8YFssWXZ4ELlXO6kGzkvlgB0WEuyz+Q3I+2wxxpG1C47Pv4p80/AGxj+rntS6Ml3srKaf8KYMrSyPloWbqRXc5QQfu3xpiwpe0RuyKwZT+/m0j/Tra/a7dlxMzOSCOncNl44Jee0/+F6Oe+UaNJ0VK47GOI9utM4OEO6mDzZXQPJICHAtjRhTSrLssVhNsZx8gNyK6q7JngVsBKwCPBLNJzF3AzUitalkORUryejEFKfcpSAOcoxkeF7UgjpnDZ1vj3lXwRcaJaRZy2pHGvnkMaRt8LvFy4bHLhsthq9nzQdvN5KMnTl2q2YUH0guVRN2MOQDdyVqohxrNS7TnlFnz05WFvpNSnLMcRVxazCnOkkVK4bH2kk71mBzCHNxEnGiK8Fx2Fy9ZCiso/2eP/nh8R2H6wcFnbdicpXLYEsK1y2i0BTNmX8r0rQY4U/hrAjtg5B12G8m7oaiybwZXAP5VzevYYHYGuC9XbwMnK60WFOdIIKVy2MvJhHu0xfQbSU/SBeq2Kml/Qv/zYosB1hcsOa2Q+txvfRX8Ec2XNNoxAzrs0TK7ZhnbhbeC3ivFzAxMC2eLLbPTRhJ4vBF9DV641BXhFeb2oMEcaGYXLFkcy18Z4TH8P2DHJ0xA7kigpXDYfsNkgw4Yj9W5XtlOot3DZqugfsi8Df6nZlB3RdZN5CVGnGaocj66M5ED8XppDcibwqmJ8TxnALsW8bjrgpcscaUQULvsE4kTLSm/1Zq8kT+vejcTOEpT/HG+FhHq3DmhPLTQSp6agD+1f0GgEXifac7yT0IvsdxL/Bi5XjB+L7OhiwifcOgHpubqeYs7l6MPI0WGONBIKl82D1KGt5LnEd5I8jUkppVm8oxy/KLIzPbvx4hIdjRD0KYisnoZu4MSazdlYacesADa0Iz6lMLEdPZyA/HuWJQEuUl6j7eQA+8IcaQQULhuBJBZp3uR68rMkT7X1X53C8/gJtO8GPFy4bO/CZT4JXUFoONETgT08pl+a5GndpRRaAYbzkVKGoU4O3KcYvxI68YJm8ALy76lhEcXYvxMmMa7pmCNtMY0H52/x/xKdBvywPovai0at6O89p38KuX/3Fy5r+UOscNn8yN+iaTk1h1mUExDXsAKwjXLOUCt5GYhOEGgIuWNsSznAvjBH2np+id/uA+AS4ADTz+WHVGsbtgpwVeGy2wqX7dCIEDSVwmXjgHuQjEcffpXk6WM1mgT6cOPNyN9gCOcjyV9l2RyRDoyJB4DrA6z7DNKAoyMwR9pCCpcdCnzPc/r1wK5JnmqyAzuSJE+fRxxQ1SSbdZEznicKl/2gcJlWKF5N4bJ1CpddBlwLLOe5zAPAT2szSvgE+he8yTXb0O68A5yqnBNjd6ZJAdY8Bqky6AiGdXfHtZkpXHYfurey8UmeTgljTTgKl+0KnOs5/S5gsyRPQzZvbjsau7pLKN8Xsgx3IOHWHLi3DuH/wmVLIyIL3wTWrrjcNGCtJE8fr2pXL44A/p9i/NPIi8CQf7HrxWLIvSkb5ZiFaBrH1Nh6GCI56ZsI2Zs3kGz7jnl+eTvShvLOgUiCTJ3Zj/Oj2ynPoD5pqfeRLg5/Bo5L8jRI0kTj3v0VGOW5RJ1/cyt4BZHyOzHJ01vrXLhRe3kZsGyd6zZ4G3Gs9yIasnN+Xgfe6alpXLhsNPBxJPliUeQhtBryfanLtveQhgR1142OQko4EsWclDA7l07gAmAnxfhfAj8IZIsv+6DfXffHb4D/qWmtKPBypIXLtG+r7cjLwJZJnt5d56KN87f70Xfz6FSOTPL0qDoXLFw2BqnB/Gqd60bGbOBbSZ76RjUGYjy6HqLTEcGGIdEcwYP1Ac0L42vIju2tMOZ4MRo516wqZ/ge8GmkZVvHoD4jLVy2CZ3vREF0Wy8uXOa7a+yPzTAn2pOfFC7bvM4Fkzx9LcnTbZHs15geRnUxC9g5kBMdhl6AYQrmRAfib8hxTFnGIC8zMTGDeuqDL6LDnCj4JRvtXbsV8bIMsEnNa9a9Xieg7SpSiiRPT0FeWq4KsX6LeAkYl+TpxYHW35jybcBg6PUc9UV7j2LT3wVxpFUVqzpCgKE3Po50hdqtiJsVa15v4ZrX6wTqvscfkOTpv5M83Qaph4yp76MPtwBrJnl6U8Br7KgcfxUdIPHWBC4EpirGr0h9yT11MZVqPUNvpEPLo6z8ZXDqTmt+s+b1OoHgqeNJnl6FJPuMRxqetxNvIm2pNknyNHRYbBnl+MkhjOhA3kU0iDVo/y2aQZWEso7cjYKfIx1qb59P1LxeiOLmdufJZlwkydP3GqVSKyI7r9ubcd0KvI+cP66Q5OkJTaoZ1rSz+gf2edZwErpa5xgz8x9Gqhq0PEZnHbF8CB9HemHtVsTLi9TfnPgqRGPS+C++En9eNBzqxUmergesgYhza5oxh2YWIlr/mSRPx4cqw+qHPynGWrmLjoLy2rXvEu9zwifZ9CiaEHlqFb7lL78lUIJIRMwEtkvy1Ofta0AKly2KtEtbpe6125ALEIWmln7JCpeNBLZAdqpfRnR4m83twNnAhUmetqrR8VzAbQwuFPEoIpwS464pZlZAlKg+Nsi4XwCHhTfHm19Tvhb0YqSO1hxpbwqX7YRk8K4NLFinUS2kGylEvwH4vwCdND6g0TZtIrALklQwMtS1IuQNRNTgDOCcVjvR3hQuG47sVDdFsqzXJoxjfQn5rF0HXJvk6TMBruHDWKSl3zr9/H4qcm8ebppFncUuyAtTf12HzkQEEGJWiRqG7DIPY+DI5mnI+X5Hv3BFJxE4VClctgBDI/lreh0ye82mcNliyA7sM8DySMH8oki98RhEkasnMxGt1RlIq7cXGj9PIjuSB5I8jUkGrjcjkajTt5G/exRy1HE58gCN2fZ2YB1EvWhzYD5ELu825JjhihbapWVlZEPwRf6bHPUs8oJ4MvHnIdSCOVLDMAzDqMBQ2AEZhmEYRjDMkRqGYRhGBcyRGoZhGEYFzJEahmEYRgXMkRqGYRhGBcyRGoZhGEYFzJEahmEYRgXMkRqGYRhGBcyRGoZhGEYFzJEahmEYRgXMkRqGYRhGBcyRGoZhGEYFzJEahmEYRgX+Pzli0mGI6yyYAAAAAElFTkSuQmCC'
    ACCEPT_COOKIES=[r'(.*\.)?(123av)\.(com)']
    @try_n(2)
    def read(self):
        video=Video(self.url,self.cw)
        self.urls.append(video.url)
        self.title=video.filename
        self.setIcon(video.th)
